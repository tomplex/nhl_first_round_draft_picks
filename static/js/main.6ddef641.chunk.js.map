{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","API_BASE","URL","BasicMap","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lat","lng","zoom","features","getPlayerData","bind","assertThisInitialized","_this2","fetch","url","params","newUrl","keys","forEach","key","searchParams","append","urlWithParams","draft_round","then","responseText","json","response","setState","result","position","react_default","a","createElement","Map","center","style","height","TileLayer","attribution","map","player","properties","id","geometry","coordinates","Popup","App_PlayerInfo","React","Component","PlayerInfo","props","name","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAWIA,EAAcC,IAAEC,KAAK,CACrBC,QAASD,IACTE,UAAWC,MAGfJ,IAAEK,OAAOC,UAAUC,QAAQN,KAAOF,EAElC,IAAMS,EAAW,IAAIC,IAAI,0EAUnBC,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,IAAK,GACLC,KAAM,GACNC,KAAM,GACNC,SAAU,IAGdX,EAAKY,cAAgBZ,EAAKY,cAAcC,KAAnBZ,OAAAa,EAAA,EAAAb,CAAAD,IATXA,+EAYE,IAAAe,EAAAZ,KAIZa,MAxBR,SAAuBC,EAAKC,GACxB,IAAIC,EAAS,IAAIrB,IAAImB,GAErB,OADAhB,OAAOmB,KAAKF,GAAQG,QAAQ,SAAAC,GAAG,OAAIH,EAAOI,aAAaC,OAAOF,EAAKJ,EAAOI,MACnEH,EAqBGM,CAAc5B,EAHL,CACX6B,YAAa,KAGZC,KAAK,SAACC,GAAD,OAAkBA,EAAaC,SACpCF,KAAK,SAACG,GAAD,OAAcf,EAAKgB,SAAS,CAACpB,SAAUmB,EAASE,uDAI1D7B,KAAKS,iDAIL,IAAMqB,EAAW,CAAC9B,KAAKI,MAAMC,IAAKL,KAAKI,MAAME,KAC7C,OACIyB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,OAAQL,EAAUvB,KAAMP,KAAKI,MAAMG,KAAM6B,MAAO,CAACC,OAAQ,SAC1DN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACIC,YAAY,yEACZzB,IAAI,6CAEPd,KAAKI,MAAMI,SAASgC,IAAI,SAAUC,GAC/B,OAAOV,EAAAC,EAAAC,cAAC1C,EAAA,EAAD,CAAQ4B,IAAKsB,EAAOC,WAAWC,GACvBb,SAAU,CAACW,EAAOG,SAASC,YAAY,GAAIJ,EAAOG,SAASC,YAAY,KAClFd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACIf,EAAAC,EAAAC,cAACc,EAAD,CAAYN,OAAQA,EAAOC,yBAtChCM,IAAMC,WAiDvBC,cACF,SAAAA,EAAYC,GAAQ,OAAArD,OAAAC,EAAA,EAAAD,CAAAE,KAAAkD,GAAApD,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoD,GAAA/C,KAAAH,KACVmD,0EAKN,OACIpB,EAAAC,EAAAC,cAAA,UAAKjC,KAAKmD,MAAMV,OAAOW,aARVJ,IAAMC,WAchBrD,IC/EKyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAAaC,SAASC,eAAe,SD0H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.6ddef641.chunk.js","sourcesContent":["import React from 'react';\nimport L from 'leaflet'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\n\n\nimport 'leaflet/dist/leaflet.css'\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n// import layers from 'leaflet/dist/images/layers.png'\n\n\nlet DefaultIcon = L.icon({\n    iconUrl: icon,\n    shadowUrl: iconShadow\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\nconst API_BASE = new URL('https://2q7e6rt0r6.execute-api.us-east-1.amazonaws.com/dev/players');\n\n\nfunction urlWithParams(url, params) {\n    let newUrl = new URL(url);\n    Object.keys(params).forEach(key => newUrl.searchParams.append(key, params[key]))\n    return newUrl\n}\n\n\nclass BasicMap extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            lat: 42.0,\n            lng: -73.0,\n            zoom: 10,\n            features: []\n        };\n\n        this.getPlayerData = this.getPlayerData.bind(this);\n    }\n\n    getPlayerData() {\n        const params = {\n            draft_round: 1\n        };\n        fetch(urlWithParams(API_BASE, params))\n            .then((responseText) => responseText.json())\n            .then((response) => this.setState({features: response.result}));\n    }\n\n    componentDidMount() {\n        this.getPlayerData();\n    }\n\n    render() {\n        const position = [this.state.lat, this.state.lng];\n        return (\n            <Map center={position} zoom={this.state.zoom} style={{height: \"100%\"}}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n                />\n                {this.state.features.map(function (player) {\n                    return <Marker key={player.properties.id}\n                                   position={[player.geometry.coordinates[1], player.geometry.coordinates[0]]}>\n                        <Popup>\n                            <PlayerInfo player={player.properties} />\n                        </Popup>\n                    </Marker>\n\n                })}\n            </Map>\n        );\n    }\n}\n\n\nclass PlayerInfo extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return (\n            <h3>{this.props.player.name}</h3>\n        )\n    }\n\n}\n\nexport default BasicMap;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BasicMap from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<BasicMap/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}