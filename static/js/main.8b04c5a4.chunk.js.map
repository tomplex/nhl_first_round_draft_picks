{"version":3,"sources":["markercluster.js","App.js","serviceWorker.js","index.js"],"names":["require","MarkerClusterGroup","props","el","L","markerClusterGroup","this","contextValue","Object","objectSpread","leaflet","layerContainer","MapLayer","withLeaflet","DefaultIcon","icon","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","Marker","prototype","options","API_BASE","URL","BasicMap","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","lat","lng","zoom","features","getPlayerData","bind","assertThisInitialized","_this2","fetch","url","params","newUrl","keys","forEach","key","searchParams","append","urlWithParams","draft_round","then","responseText","json","response","setState","result","position","react_default","a","createElement","Map","center","maxZoom","style","height","TileLayer","attribution","markercluster","map","player","properties","id","geometry","coordinates","Popup","App_PlayerInfo","React","Component","PlayerInfo","name","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAGAA,EAAQ,QAEFC,+LAEmBC,GACjB,IAAMC,EAAK,IAAIC,IAAEC,mBAAmBH,GAKpC,OAJAI,KAAKC,aAALC,OAAAC,EAAA,EAAAD,CAAA,GACON,EAAMQ,QADb,CAEIC,eAAgBR,IAEbA,SARkBS,KAalBC,cAAYZ,6CCLvBa,SAAcV,IAAEW,KAAK,CACrBC,QAASD,IACTE,UAAWC,IACXC,SAAU,CAAC,GAAG,IACdC,WAAY,CAAC,GAAG,OAGpBhB,IAAEiB,OAAOC,UAAUC,QAAQR,KAAOD,EAElC,IAAMU,EAAW,IAAIC,IAAI,0EAUnBC,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAAnB,OAAAoB,EAAA,EAAApB,CAAAF,KAAAoB,IACVC,EAAAnB,OAAAqB,EAAA,EAAArB,CAAAF,KAAAE,OAAAsB,EAAA,EAAAtB,CAAAkB,GAAAK,KAAAzB,QACK0B,MAAQ,CACTC,IAAK,GACLC,KAAM,GACNC,KAAM,GACNC,SAAU,IAGdT,EAAKU,cAAgBV,EAAKU,cAAcC,KAAnB9B,OAAA+B,EAAA,EAAA/B,CAAAmB,IATXA,+EAYE,IAAAa,EAAAlC,KAIZmC,MAxBR,SAAuBC,EAAKC,GACxB,IAAIC,EAAS,IAAInB,IAAIiB,GAErB,OADAlC,OAAOqC,KAAKF,GAAQG,QAAQ,SAAAC,GAAG,OAAIH,EAAOI,aAAaC,OAAOF,EAAKJ,EAAOI,MACnEH,EAqBGM,CAAc1B,EAHL,CACX2B,YAAa,KAGZC,KAAK,SAACC,GAAD,OAAkBA,EAAaC,SACpCF,KAAK,SAACG,GAAD,OAAcf,EAAKgB,SAAS,CAACpB,SAAUmB,EAASE,uDAI1DnD,KAAK+B,iDAIL,IAAMqB,EAAW,CAACpD,KAAK0B,MAAMC,IAAK3B,KAAK0B,MAAME,KAC7C,OACIyB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,OAAQL,EAAUM,QAAS,GAAI7B,KAAM7B,KAAK0B,MAAMG,KAAM8B,MAAO,CAACC,OAAQ,SACvEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACIC,YAAY,yEACZ1B,IAAI,6CAERiB,EAAAC,EAAAC,cAACQ,EAAD,KACK/D,KAAK0B,MAAMI,SAASkC,IAAI,SAAUC,GAC/B,OAAOZ,EAAAC,EAAAC,cAACxC,EAAA,EAAD,CAAQ0B,IAAKwB,EAAOC,WAAWC,GACvBf,SAAU,CAACa,EAAOG,SAASC,YAAY,GAAIJ,EAAOG,SAASC,YAAY,KAClFhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACgB,EAAD,CAAYN,OAAQA,EAAOC,0BAvCpCM,IAAMC,WAmDvBC,cACF,SAAAA,EAAY9E,GAAQ,OAAAM,OAAAoB,EAAA,EAAApB,CAAAF,KAAA0E,GAAAxE,OAAAqB,EAAA,EAAArB,CAAAF,KAAAE,OAAAsB,EAAA,EAAAtB,CAAAwE,GAAAjD,KAAAzB,KACVJ,0EAKN,OACIyD,EAAAC,EAAAC,cAAA,UAAKvD,KAAKJ,MAAMqE,OAAOU,aARVH,IAAMC,WAchBrD,ICrFKwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAAaC,SAASC,eAAe,SDyH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.8b04c5a4.chunk.js","sourcesContent":["import { MapLayer, withLeaflet } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nrequire(\"leaflet.markercluster\");\n\nclass MarkerClusterGroup extends MapLayer {\n\n    createLeafletElement(props) {\n        const el = new L.markerClusterGroup(props);\n        this.contextValue = {\n            ...props.leaflet,\n            layerContainer: el\n        };\n        return el;\n    }\n\n}\n\nexport default withLeaflet(MarkerClusterGroup);","import React from 'react';\nimport L from 'leaflet'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport MarkerClusterGroup from './markercluster'\n\nimport 'leaflet/dist/leaflet.css'\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n// import layers from 'leaflet/dist/images/layers.png'\nimport 'react-leaflet-markercluster/dist/styles.min.css';\n\n\n\nlet DefaultIcon = L.icon({\n    iconUrl: icon,\n    shadowUrl: iconShadow,\n    iconSize: [25,41],\n    iconAnchor: [12,39]\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\nconst API_BASE = new URL('https://2q7e6rt0r6.execute-api.us-east-1.amazonaws.com/dev/players');\n\n\nfunction urlWithParams(url, params) {\n    let newUrl = new URL(url);\n    Object.keys(params).forEach(key => newUrl.searchParams.append(key, params[key]))\n    return newUrl\n}\n\n\nclass BasicMap extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            lat: 42.0,\n            lng: -73.0,\n            zoom: 10,\n            features: []\n        };\n\n        this.getPlayerData = this.getPlayerData.bind(this);\n    }\n\n    getPlayerData() {\n        const params = {\n            draft_round: 1\n        };\n        fetch(urlWithParams(API_BASE, params))\n            .then((responseText) => responseText.json())\n            .then((response) => this.setState({features: response.result}));\n    }\n\n    componentDidMount() {\n        this.getPlayerData();\n    }\n\n    render() {\n        const position = [this.state.lat, this.state.lng];\n        return (\n            <Map center={position} maxZoom={20} zoom={this.state.zoom} style={{height: \"100%\"}}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n                />\n                <MarkerClusterGroup>\n                    {this.state.features.map(function (player) {\n                        return <Marker key={player.properties.id}\n                                       position={[player.geometry.coordinates[1], player.geometry.coordinates[0]]}>\n                            <Popup>\n                                <PlayerInfo player={player.properties} />\n                            </Popup>\n                        </Marker>\n\n                    })}\n                </MarkerClusterGroup>\n            </Map>\n        );\n    }\n}\n\n\nclass PlayerInfo extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        return (\n            <h3>{this.props.player.name}</h3>\n        )\n    }\n\n}\n\nexport default BasicMap;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BasicMap from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<BasicMap/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}